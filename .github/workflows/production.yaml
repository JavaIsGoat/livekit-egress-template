name: Production Deployment

on:
  push:
    branches:
      - main

jobs:
  # Build and push docker images

  build-translator:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./translator

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: byrdhouse-translator
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-translator

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         mask-password: "true"

  #     - name: Fill production template docker compose
  #       uses: cuchi/jinja2-action@v1.2.0
  #       with:
  #         template: production-template.yaml.j2
  #         output_file: production.yaml
  #       env:
  #         EXPORTER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/byrdhouse-video-translator-exporter:${{ github.sha }}
  #         AZURE_SPEECH__KEY: ${{ secrets.PROD_AZURE_SPEECH_KEY }}
  #         AZURE_SPEECH_REGION: ${{ secrets.PROD_AZURE_SPEECH_REGION }}

  #     - name: Get GitHub Actions runner IP
  #       run: |
  #         ip=`curl https://ipinfo.io/ip`
  #         echo $ip
  #         echo "GITHUB_RUNNER_IP=$ip" >> $GITHUB_ENV

  #     - name: Add GitHub Actions IP to SSH allowlist
  #       run: |
  #         aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ALLOWLIST_ID }} --protocol tcp --port 22 --cidr ${{ env.GITHUB_RUNNER_IP }}/32
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  #     - name: SCP production docker compose
  #       env:
  #         SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  #       run: |
  #         ssh-agent -a $SSH_AUTH_SOCK > /dev/null
  #         ssh-add - <<< "${{ secrets.PROD_SSH_KEY }}"
  #         scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null production.yaml ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:/var/video-translator/docker-compose.yaml

  #     - name: Login to ECR from server and restart docker compose
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.PROD_SSH_HOST}}
  #         username: ${{secrets.PROD_SSH_USER}}
  #         key: ${{secrets.PROD_SSH_KEY}}
  #         script: |
  #           cd /var/video-translator
  #           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
  #           docker compose up -d --force-recreate
  #           docker system prune -af

  #     - name: Remove GitHub Actions IP from SSH allowlist
  #       run: |
  #         aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ALLOWLIST_ID }} --protocol tcp --port 22 --cidr ${{ env.GITHUB_RUNNER_IP }}/32
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  #       if: always()
